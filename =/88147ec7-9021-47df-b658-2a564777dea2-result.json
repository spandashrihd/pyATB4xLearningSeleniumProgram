{"name": "Verify the current url of the web page google.com", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: MicrosoftEdge=129.0.2792.89)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6924FCEF5+12997]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF69277BD24+1897988]\n\t(No symbol) [0x00007FF6922AF1CC]\n\t(No symbol) [0x00007FF69229ACD3]\n\t(No symbol) [0x00007FF69229AA5E]\n\t(No symbol) [0x00007FF692298D71]\n\t(No symbol) [0x00007FF6922992EF]\n\t(No symbol) [0x00007FF6922A57C1]\n\t(No symbol) [0x00007FF6922BB8D7]\n\t(No symbol) [0x00007FF6922C0A3A]\n\t(No symbol) [0x00007FF692299C3A]\n\t(No symbol) [0x00007FF6922999B6]\n\t(No symbol) [0x00007FF6922BB686]\n\t(No symbol) [0x00007FF6923327ED]\n\t(No symbol) [0x00007FF692317BB3]\n\t(No symbol) [0x00007FF6922EB5AC]\n\t(No symbol) [0x00007FF6922EAA8D]\n\t(No symbol) [0x00007FF6922EB171]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6926A9E04+1038052]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF69242095F+56655]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF692413103+1267]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6926A8B8D+1033325]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF692499761+327729]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF692495BE4+312500]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF692495D19+312809]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF69248C28C+273244]\n\tBaseThreadInitThunk [0x00007FFC457F7374+20]\n\tRtlUserThreadStart [0x00007FFC4633CC91+33]", "trace": "@allure.title(\"Verify the current url of the web page google.com\")\n    def test_sample():\n        driver=webdriver.Edge()\n>       driver.get(\"https://google.com\")\n\nsrc\\ex_oct_16\\test_Lb002.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EFB5FEEF50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...48C28C+273244]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC457F7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC4633CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: MicrosoftEdge=129.0.2792.89)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6924FCEF5+12997]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF69277BD24+1897988]\nE       \t(No symbol) [0x00007FF6922AF1CC]\nE       \t(No symbol) [0x00007FF69229ACD3]\nE       \t(No symbol) [0x00007FF69229AA5E]\nE       \t(No symbol) [0x00007FF692298D71]\nE       \t(No symbol) [0x00007FF6922992EF]\nE       \t(No symbol) [0x00007FF6922A57C1]\nE       \t(No symbol) [0x00007FF6922BB8D7]\nE       \t(No symbol) [0x00007FF6922C0A3A]\nE       \t(No symbol) [0x00007FF692299C3A]\nE       \t(No symbol) [0x00007FF6922999B6]\nE       \t(No symbol) [0x00007FF6922BB686]\nE       \t(No symbol) [0x00007FF6923327ED]\nE       \t(No symbol) [0x00007FF692317BB3]\nE       \t(No symbol) [0x00007FF6922EB5AC]\nE       \t(No symbol) [0x00007FF6922EAA8D]\nE       \t(No symbol) [0x00007FF6922EB171]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6926A9E04+1038052]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF69242095F+56655]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF692413103+1267]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6926A8B8D+1033325]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF692499761+327729]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF692495BE4+312500]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF692495D19+312809]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF69248C28C+273244]\nE       \tBaseThreadInitThunk [0x00007FFC457F7374+20]\nE       \tRtlUserThreadStart [0x00007FFC4633CC91+33]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: TimeoutException"}, "start": 1729176368241, "stop": 1729176753795, "uuid": "4cc7197c-9687-40c9-a461-fba09c72095d", "historyId": "3a5877d18dbeb38b2e2d6b8c953fa841", "testCaseId": "3a5877d18dbeb38b2e2d6b8c953fa841", "fullName": "src.ex_oct_16.test_Lb002#test_sample", "labels": [{"name": "parentSuite", "value": "src.ex_oct_16"}, {"name": "suite", "value": "test_Lb002"}, {"name": "host", "value": "DESKTOP-N2JUPE0"}, {"name": "thread", "value": "10392-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.ex_oct_16.test_Lb002"}]}