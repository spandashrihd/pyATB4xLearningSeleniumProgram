{"name": "test_current_url_verification_chrome", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: DevToolsActivePort file doesn't exist\nStacktrace:\n\tGetHandleVerifier [0x00007FF776D3E1F5+2972373]\n\t(No symbol) [0x00007FF7769D55F0]\n\t(No symbol) [0x00007FF7768757FA]\n\t(No symbol) [0x00007FF7768B2C65]\n\t(No symbol) [0x00007FF7768ADAA5]\n\t(No symbol) [0x00007FF7768A8D6E]\n\t(No symbol) [0x00007FF7768F6CA1]\n\t(No symbol) [0x00007FF7768F6320]\n\t(No symbol) [0x00007FF7768EB823]\n\t(No symbol) [0x00007FF7768B75E8]\n\t(No symbol) [0x00007FF7768B8751]\n\tGetHandleVerifier [0x00007FF776D647BD+3129501]\n\tGetHandleVerifier [0x00007FF776DB4D00+3458528]\n\tGetHandleVerifier [0x00007FF776DAB05D+3418429]\n\tGetHandleVerifier [0x00007FF776B3687B+844123]\n\t(No symbol) [0x00007FF7769E0AFF]\n\t(No symbol) [0x00007FF7769DC6D4]\n\t(No symbol) [0x00007FF7769DC86D]\n\t(No symbol) [0x00007FF7769CBD79]\n\tBaseThreadInitThunk [0x00007FFC457F7374+20]\n\tRtlUserThreadStart [0x00007FFC4633CC91+33]", "trace": "def test_current_url_verification_chrome():\n>       driver=webdriver.Chrome()\n\nsrc\\ex_oct_17\\test_Lab07.py:6: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029AAF7091B0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: DevToolsActivePort f...07FF7769CBD79]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC457F7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC4633CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: DevToolsActivePort file doesn't exist\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF776D3E1F5+2972373]\nE       \t(No symbol) [0x00007FF7769D55F0]\nE       \t(No symbol) [0x00007FF7768757FA]\nE       \t(No symbol) [0x00007FF7768B2C65]\nE       \t(No symbol) [0x00007FF7768ADAA5]\nE       \t(No symbol) [0x00007FF7768A8D6E]\nE       \t(No symbol) [0x00007FF7768F6CA1]\nE       \t(No symbol) [0x00007FF7768F6320]\nE       \t(No symbol) [0x00007FF7768EB823]\nE       \t(No symbol) [0x00007FF7768B75E8]\nE       \t(No symbol) [0x00007FF7768B8751]\nE       \tGetHandleVerifier [0x00007FF776D647BD+3129501]\nE       \tGetHandleVerifier [0x00007FF776DB4D00+3458528]\nE       \tGetHandleVerifier [0x00007FF776DAB05D+3418429]\nE       \tGetHandleVerifier [0x00007FF776B3687B+844123]\nE       \t(No symbol) [0x00007FF7769E0AFF]\nE       \t(No symbol) [0x00007FF7769DC6D4]\nE       \t(No symbol) [0x00007FF7769DC86D]\nE       \t(No symbol) [0x00007FF7769CBD79]\nE       \tBaseThreadInitThunk [0x00007FFC457F7374+20]\nE       \tRtlUserThreadStart [0x00007FFC4633CC91+33]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "start": 1729337219084, "stop": 1729337310622, "uuid": "61a1b93a-7e41-44da-8f98-e0526fff6719", "historyId": "b4bb1a6021d5cf28dc16e81b61547349", "testCaseId": "b4bb1a6021d5cf28dc16e81b61547349", "fullName": "src.ex_oct_17.test_Lab07#test_current_url_verification_chrome", "labels": [{"name": "parentSuite", "value": "src.ex_oct_17"}, {"name": "suite", "value": "test_Lab07"}, {"name": "host", "value": "DESKTOP-N2JUPE0"}, {"name": "thread", "value": "13380-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.ex_oct_17.test_Lab07"}]}