{"name": "test_chrome_options", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=130.0.6723.58)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7921BE1F5+2972373]\n\t(No symbol) [0x00007FF791E555F0]\n\t(No symbol) [0x00007FF791CF57FA]\n\t(No symbol) [0x00007FF791CE3BD7]\n\t(No symbol) [0x00007FF791CE38DA]\n\t(No symbol) [0x00007FF791CE151E]\n\t(No symbol) [0x00007FF791CE1FCF]\n\t(No symbol) [0x00007FF791CF08BE]\n\t(No symbol) [0x00007FF791D0383D]\n\t(No symbol) [0x00007FF791D091BA]\n\t(No symbol) [0x00007FF791CE2734]\n\t(No symbol) [0x00007FF791D03666]\n\t(No symbol) [0x00007FF791D8B7AE]\n\t(No symbol) [0x00007FF791D6B823]\n\t(No symbol) [0x00007FF791D375E8]\n\t(No symbol) [0x00007FF791D38751]\n\tGetHandleVerifier [0x00007FF7921E47BD+3129501]\n\tGetHandleVerifier [0x00007FF792234D00+3458528]\n\tGetHandleVerifier [0x00007FF79222B05D+3418429]\n\tGetHandleVerifier [0x00007FF791FB687B+844123]\n\t(No symbol) [0x00007FF791E60AFF]\n\t(No symbol) [0x00007FF791E5C6D4]\n\t(No symbol) [0x00007FF791E5C86D]\n\t(No symbol) [0x00007FF791E4BD79]\n\tBaseThreadInitThunk [0x00007FFC457F7374+20]\n\tRtlUserThreadStart [0x00007FFC4633CC91+33]", "trace": "def test_chrome_options():\n    \n        chrome_option=Options()\n        chrome_option.add_argument(\"--incognito\")   #chrome incognito mode\n        driver=webdriver.Chrome(chrome_option)\n>       driver.get(\"https://katalon-demo-cura.herokuapp.com/\")\n\nsrc\\ex_oct_17\\test_Lab05.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024A86B45A50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...07FF791E4BD79]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC457F7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC4633CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome=130.0.6723.58)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7921BE1F5+2972373]\nE       \t(No symbol) [0x00007FF791E555F0]\nE       \t(No symbol) [0x00007FF791CF57FA]\nE       \t(No symbol) [0x00007FF791CE3BD7]\nE       \t(No symbol) [0x00007FF791CE38DA]\nE       \t(No symbol) [0x00007FF791CE151E]\nE       \t(No symbol) [0x00007FF791CE1FCF]\nE       \t(No symbol) [0x00007FF791CF08BE]\nE       \t(No symbol) [0x00007FF791D0383D]\nE       \t(No symbol) [0x00007FF791D091BA]\nE       \t(No symbol) [0x00007FF791CE2734]\nE       \t(No symbol) [0x00007FF791D03666]\nE       \t(No symbol) [0x00007FF791D8B7AE]\nE       \t(No symbol) [0x00007FF791D6B823]\nE       \t(No symbol) [0x00007FF791D375E8]\nE       \t(No symbol) [0x00007FF791D38751]\nE       \tGetHandleVerifier [0x00007FF7921E47BD+3129501]\nE       \tGetHandleVerifier [0x00007FF792234D00+3458528]\nE       \tGetHandleVerifier [0x00007FF79222B05D+3418429]\nE       \tGetHandleVerifier [0x00007FF791FB687B+844123]\nE       \t(No symbol) [0x00007FF791E60AFF]\nE       \t(No symbol) [0x00007FF791E5C6D4]\nE       \t(No symbol) [0x00007FF791E5C86D]\nE       \t(No symbol) [0x00007FF791E4BD79]\nE       \tBaseThreadInitThunk [0x00007FFC457F7374+20]\nE       \tRtlUserThreadStart [0x00007FFC4633CC91+33]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: TimeoutException"}, "start": 1729248275229, "stop": 1729248709003, "uuid": "92cb2685-f4bd-4f39-8aab-5dcf4126b963", "historyId": "2a731f5a559acece418be74d61e12cec", "testCaseId": "2a731f5a559acece418be74d61e12cec", "fullName": "src.ex_oct_17.test_Lab05#test_chrome_options", "labels": [{"name": "parentSuite", "value": "src.ex_oct_17"}, {"name": "suite", "value": "test_Lab05"}, {"name": "host", "value": "DESKTOP-N2JUPE0"}, {"name": "thread", "value": "16664-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.ex_oct_17.test_Lab05"}]}